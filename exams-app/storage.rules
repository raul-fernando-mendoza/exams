rules_version = '2';
service firebase.storage {
  match /b/{bucket}/o {

    match /{allPaths=**} {
    
      allow read: if true;
    }
    match /organizations/{organization_id}/{collection}/{docId} {
      function isAdmin() {
        return ('role-admin-' + firestore.get(/databases/(default)/documents/$(collection)/$(docId)).data.organization_id) in request.auth.token
      }      
      allow read, write: if isAdmin();
      
      match /{document=**} { 
      	allow read, write: if isAdmin()
      }
    }
    
 
    match /organizations/{organization_id}/laboratoryGrades/{laboratoryGradeId}/VideoMarker/practiceData/{fileId} {
      function isLaboratoryGradeStudent() {
        return request.auth.uid == firestore.get(/databases/(default)/documents/laboratoryGrades/$(laboratoryGradeId)).data.student_uid
      }     
      allow read, write: if isLaboratoryGradeStudent()  
    }
    match /organizations/{organization_id}/examGrades/{examGradeId}/parameterGrades/{parameterGradeId} {
      function isParameterGradeEvaluator() {
        return request.auth.uid == firestore.get(/databases/(default)/documents/examGrades/$(examGradeId)/parameterGrades/$(parameterGradeId)).data.evaluator_uid
      }  
      function isParameterGradeStudent() {
        return request.auth.uid == firestore.get(/databases/(default)/documents/examGrades/$(examGradeId)).data.student_uid
      }        
      allow read, write: if isParameterGradeEvaluator()  
      allow read: if isParameterGradeStudent() 
    } 
    match /organizations/{organization_id}/Revision/{revisionId} {  
      allow read, write: if request.auth.uid != null
      match /{document=**} { 
      	allow read, write: if request.auth.uid != null
      }      
    }          
  }
  
}
